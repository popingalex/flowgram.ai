---
description:
globs:
alwaysApply: true
---
# Flowgram 扩展开发规则

## 🚨 核心约束（绝对遵守）
- ❌ **禁止修改**：`packages/` 目录下的引擎代码
- ✅ **自由修改**：`src/components/ext/` 下的所有扩展代码
- ⚠️ **谨慎修改**：其他原有的工作流编辑器相关代码
- ⚙ 开发时充分例用semi.designe的功能和样式，尽量避免重复造轮子

## 📋 任务管理机制（保证工作连续性）

### 任务目录结构
- 在工程根目录创建 `cursor_works/` 作为任务管理目录
- 复杂任务创建 `cursor_works/{任务简名}.md` 进行详细跟踪
- 创建 `cursor_works/current_task.md` 记录当前正在执行的复杂任务的文件名


### 任务文件要求
- 每个任务文件包含3-8个步骤的具体操作清单
- 每完成一步需要记录：完成时间、具体操作、遇到的问题
- 任务状态：进行中/暂停/完成，暂停需说明原因
- `current_task.md` 必须指向当前活跃的任务文件

### 任务执行原则
- 开始新对话时，首先检查 `current_task.md` 了解当前任务
- 无法单次完成的任务必须创建任务文件跟踪
- 任务中断时必须更新状态和进度

## 🎯 开发原则
- **修改前确认*原始工作流编辑器功能？
- **兼容性优先**：确保"流程自由重写，引擎功能必须保持兼容

## 📁 项目结构
- **工作目录**：`apps/demo-free-layout-forked/`
- **扩展组件**：`src/components/ext/` - 可自由修改
- **原始编辑器**：`src/editor.tsx` - 谨慎修改
- **引擎代码**：`packages/` - 绝对不能修改

## 🔧 开发流程
- 使用命令```rush dev:demo-free-layout-forked```启动调试服务，通常在3000端口，避免重复启动，
- **问题处理**：优先查看原始实现 `demo-free-layout`，理解根本原因
- **解决方案**：寻找不破坏原有设计的方案，
## ✅ 代码修改验证（须确认）
- 确保不影响
- 确保不改变原有界面样式和用户体验
- 确保不破坏功能按预期工作且控制台
