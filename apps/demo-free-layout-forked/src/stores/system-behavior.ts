import { useShallow } from 'zustand/react/shallow';
import { immer } from 'zustand/middleware/immer';
import { devtools } from 'zustand/middleware';
import { create } from 'zustand';
import { nanoid } from 'nanoid';
import { cloneDeep } from 'lodash-es';

import {
  SystemBehavior,
  BehaviorParameter,
  CodeConfig,
  CodeType,
  CodeLanguage,
  SystemBehaviorStoreState,
  SystemBehaviorActions,
} from '../typings/behavior';
import { expressionManagementApi } from '../services/api-service';

// ÁªÑÂêàStoreÁ±ªÂûã
type SystemBehaviorStore = SystemBehaviorStoreState & SystemBehaviorActions;

// ÂàõÂª∫Store
const useSystemBehaviorStoreBase = create<SystemBehaviorStore>()(
  devtools(
    immer((set, get) => ({
      // ÂàùÂßãÁä∂ÊÄÅ
      behaviors: [],
      loading: false,
      error: null,
      editingBehavior: null,
      originalBehavior: null,
      isDirty: false,
      isSaving: false,

      // Âä†ËΩΩË°å‰∏∫Êï∞ÊçÆ
      loadBehaviors: async () => {
        set((state) => {
          state.loading = true;
          state.error = null;
        });

        try {
          // üîß ‰ΩøÁî®behaviorApi.getAll()Ëé∑ÂèñÊï∞ÊçÆÔºå‰∏éÂÖ∂‰ªñStore‰øùÊåÅ‰∏ÄËá¥
          const behaviorData = await expressionManagementApi.getAllBehaviors();

          console.log('üîç [SystemBehaviorStore] APIËøîÂõûÁöÑÂéüÂßãÊï∞ÊçÆ:', {
            isArray: Array.isArray(behaviorData),
            length: behaviorData?.length,
            firstItem: behaviorData?.[0],
          });

          const behaviors: SystemBehavior[] = behaviorData.map((behavior: any) => {
            console.log('üîç [SystemBehaviorStore] ËΩ¨Êç¢Ë°å‰∏∫Êï∞ÊçÆ:', {
              ÂéüÂßãÊï∞ÊçÆ: behavior,
              id: behavior.id,
              name: behavior.name,
              exp: behavior.exp,
              ÊâÄÊúâÂ≠óÊÆµ: Object.keys(behavior),
            });

            const converted = {
              _indexId: behavior._indexId || nanoid(),
              _status: 'saved' as const,
              id: behavior.id,
              name: behavior.name,
              description: behavior.desc || '',
              exp: behavior.exp || '', // üéØ ‰øùÁïôExpressionÁöÑexpÂ≠óÊÆµ
              parameters: [], // Ë°å‰∏∫ÂèÇÊï∞ÈúÄË¶ÅÂçïÁã¨ÈÖçÁΩÆ
              codeConfig: {
                type: CodeType.LOCAL, // ÈªòËÆ§‰∏∫Êú¨Âú∞ÂáΩÊï∞
                functionId: behavior.id,
                functionName: behavior.name,
              },
              deprecated: behavior.deprecated || false,
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString(),
            };

            console.log('üîç [SystemBehaviorStore] ËΩ¨Êç¢ÁªìÊûú:', {
              id: converted.id,
              name: converted.name,
              description: converted.description,
              exp: converted.exp,
            });

            return converted;
          });

          set((state) => {
            state.behaviors = behaviors;
            state.loading = false;
          });

          console.log('‚úÖ [SystemBehaviorStore] Ë°å‰∏∫Êï∞ÊçÆÂä†ËΩΩÊàêÂäü:', behaviors.length);
        } catch (error) {
          console.error('‚ùå [SystemBehaviorStore] Âä†ËΩΩË°å‰∏∫Êï∞ÊçÆÂ§±Ë¥•:', error);
          set((state) => {
            state.loading = false;
            state.error = error instanceof Error ? error.message : 'Âä†ËΩΩÂ§±Ë¥•';
          });
        }
      },

      // ÂàõÂª∫Ë°å‰∏∫
      createBehavior: async (behaviorData) => {
        set((state) => {
          state.isSaving = true;
          state.error = null;
        });

        try {
          const newBehavior: SystemBehavior = {
            ...behaviorData,
            _indexId: nanoid(),
            _status: 'saved',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
          };

          // Ê®°ÊãüAPIÂª∂Ëøü
          await new Promise((resolve) => setTimeout(resolve, 500));

          set((state) => {
            state.behaviors.push(newBehavior);
            state.isSaving = false;
          });

          // üîß ‰∏çÂÜç‰ΩøÁî®localStorageÂ≠òÂÇ®ÔºåÊï∞ÊçÆÈÄöËøáAPIÁÆ°ÁêÜ

          console.log('‚úÖ [SystemBehaviorStore] Ë°å‰∏∫ÂàõÂª∫ÊàêÂäü:', newBehavior.id);
        } catch (error) {
          console.error('‚ùå [SystemBehaviorStore] ÂàõÂª∫Ë°å‰∏∫Â§±Ë¥•:', error);
          set((state) => {
            state.isSaving = false;
            state.error = error instanceof Error ? error.message : 'ÂàõÂª∫Â§±Ë¥•';
          });
        }
      },

      // Êõ¥Êñ∞Ë°å‰∏∫
      updateBehavior: async (id, updates) => {
        set((state) => {
          state.isSaving = true;
          state.error = null;
        });

        try {
          // Ê®°ÊãüAPIÂª∂Ëøü
          await new Promise((resolve) => setTimeout(resolve, 500));

          set((state) => {
            const index = state.behaviors.findIndex((b) => b.id === id);
            if (index !== -1) {
              state.behaviors[index] = {
                ...state.behaviors[index],
                ...updates,
                updatedAt: new Date().toISOString(),
              };
            }
            state.isSaving = false;
          });

          // üîß ‰∏çÂÜç‰ΩøÁî®localStorageÂ≠òÂÇ®ÔºåÊï∞ÊçÆÈÄöËøáAPIÁÆ°ÁêÜ

          console.log('‚úÖ [SystemBehaviorStore] Ë°å‰∏∫Êõ¥Êñ∞ÊàêÂäü:', id);
        } catch (error) {
          console.error('‚ùå [SystemBehaviorStore] Êõ¥Êñ∞Ë°å‰∏∫Â§±Ë¥•:', error);
          set((state) => {
            state.isSaving = false;
            state.error = error instanceof Error ? error.message : 'Êõ¥Êñ∞Â§±Ë¥•';
          });
        }
      },

      // Âà†Èô§Ë°å‰∏∫
      deleteBehavior: async (id) => {
        set((state) => {
          state.isSaving = true;
          state.error = null;
        });

        try {
          // Ê®°ÊãüAPIÂª∂Ëøü
          await new Promise((resolve) => setTimeout(resolve, 300));

          set((state) => {
            state.behaviors = state.behaviors.filter((b) => b.id !== id);
            state.isSaving = false;
          });

          // üîß ‰∏çÂÜç‰ΩøÁî®localStorageÂ≠òÂÇ®ÔºåÊï∞ÊçÆÈÄöËøáAPIÁÆ°ÁêÜ

          console.log('‚úÖ [SystemBehaviorStore] Ë°å‰∏∫Âà†Èô§ÊàêÂäü:', id);
        } catch (error) {
          console.error('‚ùå [SystemBehaviorStore] Âà†Èô§Ë°å‰∏∫Â§±Ë¥•:', error);
          set((state) => {
            state.isSaving = false;
            state.error = error instanceof Error ? error.message : 'Âà†Èô§Â§±Ë¥•';
          });
        }
      },

      // Ê†πÊçÆIDËé∑ÂèñË°å‰∏∫
      getBehaviorById: (id) => {
        const state = get();
        return state.behaviors.find((b) => b.id === id) || null;
      },

      // ÂºÄÂßãÁºñËæë
      startEdit: (behavior) => {
        console.log('üìù [SystemBehaviorStore] ÂºÄÂßãÁºñËæëË°å‰∏∫ - ËæìÂÖ•Êï∞ÊçÆ:', {
          id: behavior.id,
          name: behavior.name,
          description: behavior.description,
          ÂÆåÊï¥ÂØπË±°: behavior,
        });

        set((state) => {
          state.editingBehavior = cloneDeep(behavior);
          state.originalBehavior = cloneDeep(behavior);
          state.isDirty = false;
        });

        const editingBehavior = get().editingBehavior;
        console.log('üìù [SystemBehaviorStore] ÁºñËæëÁä∂ÊÄÅËÆæÁΩÆÂÆåÊàê:', {
          id: editingBehavior?.id,
          name: editingBehavior?.name,
          description: editingBehavior?.description,
        });
      },

      // ÂÅúÊ≠¢ÁºñËæë
      stopEdit: () => {
        set((state) => {
          state.editingBehavior = null;
          state.originalBehavior = null;
          state.isDirty = false;
        });

        console.log('üîÑ [SystemBehaviorStore] ÂÅúÊ≠¢ÁºñËæë');
      },

      // Êõ¥Êñ∞ÁºñËæë‰∏≠ÁöÑË°å‰∏∫
      updateEditingBehavior: (updates) => {
        set((state) => {
          if (state.editingBehavior) {
            state.editingBehavior = {
              ...state.editingBehavior,
              ...updates,
            };
            state.isDirty = true;
            console.log('üîÑ [SystemBehaviorStore] Áä∂ÊÄÅÂ∑≤Êõ¥Êñ∞ isDirty:', state.isDirty);
          }
        });
      },

      // ‰øùÂ≠òÁºñËæëÂèòÊõ¥
      saveChanges: async () => {
        const state = get();
        if (!state.editingBehavior) return;

        try {
          if (state.editingBehavior._status === 'new') {
            // Êñ∞Âª∫Ë°å‰∏∫
            await get().createBehavior(state.editingBehavior);
          } else {
            // Êõ¥Êñ∞Áé∞ÊúâË°å‰∏∫
            await get().updateBehavior(state.editingBehavior.id, state.editingBehavior);
          }

          // ‰øùÂ≠òÊàêÂäüÂêéÂÅúÊ≠¢ÁºñËæë
          get().stopEdit();
        } catch (error) {
          console.error('‚ùå [SystemBehaviorStore] ‰øùÂ≠òÂèòÊõ¥Â§±Ë¥•:', error);
          throw error;
        }
      },

      // ÈáçÁΩÆÁºñËæëÂèòÊõ¥
      resetChanges: () => {
        set((state) => {
          if (state.originalBehavior) {
            state.editingBehavior = cloneDeep(state.originalBehavior);
            state.isDirty = false;
          }
        });

        console.log('üîÑ [SystemBehaviorStore] ÈáçÁΩÆÁºñËæëÂèòÊõ¥');
      },

      // Ê∑ªÂä†ÂèÇÊï∞
      addParameter: (parameterData) => {
        set((state) => {
          if (state.editingBehavior) {
            const newParameter: BehaviorParameter = {
              ...parameterData,
              _indexId: nanoid(),
              _status: 'new',
            };
            state.editingBehavior.parameters.push(newParameter);
            state.isDirty = true;
          }
        });
      },

      // Êõ¥Êñ∞ÂèÇÊï∞
      updateParameter: (parameterId, updates) => {
        set((state) => {
          if (state.editingBehavior) {
            const index = state.editingBehavior.parameters.findIndex(
              (p) => p._indexId === parameterId
            );
            if (index !== -1) {
              state.editingBehavior.parameters[index] = {
                ...state.editingBehavior.parameters[index],
                ...updates,
              };
              state.isDirty = true;
            }
          }
        });
      },

      // Âà†Èô§ÂèÇÊï∞
      deleteParameter: (parameterId) => {
        set((state) => {
          if (state.editingBehavior) {
            state.editingBehavior.parameters = state.editingBehavior.parameters.filter(
              (p) => p._indexId !== parameterId
            );
            state.isDirty = true;
          }
        });
      },

      // Êõ¥Êñ∞‰ª£Á†ÅÈÖçÁΩÆ
      updateCodeConfig: (codeConfig) => {
        set((state) => {
          if (state.editingBehavior) {
            state.editingBehavior.codeConfig = codeConfig;
            state.isDirty = true;
          }
        });
      },

      // Ê∏ÖÈô§ÈîôËØØ
      clearError: () => {
        set((state) => {
          state.error = null;
        });
      },

      // Âà∑Êñ∞Ë°å‰∏∫Êï∞ÊçÆ
      refreshBehaviors: async () => {
        await get().loadBehaviors();
      },
    })),
    {
      name: 'system-behavior-store',
    }
  )
);

// ÂØºÂá∫Store hooks
export const useSystemBehaviorStore = () => useSystemBehaviorStoreBase();

// ÂØºÂá∫Áä∂ÊÄÅ hooks
export const useSystemBehaviorList = () =>
  useSystemBehaviorStoreBase(
    useShallow((state) => ({
      behaviors: state.behaviors,
      loading: state.loading,
      error: state.error,
    }))
  );

// ÂØºÂá∫ÁºñËæëÁä∂ÊÄÅ hooks
export const useSystemBehaviorEdit = () =>
  useSystemBehaviorStoreBase(
    useShallow((state) => ({
      editingBehavior: state.editingBehavior,
      originalBehavior: state.originalBehavior,
      isDirty: state.isDirty,
      isSaving: state.isSaving,
    }))
  );

// ÂØºÂá∫Êìç‰Ωú hooks
export const useSystemBehaviorActions = () =>
  useSystemBehaviorStoreBase(
    useShallow((state) => ({
      loadBehaviors: state.loadBehaviors,
      createBehavior: state.createBehavior,
      updateBehavior: state.updateBehavior,
      deleteBehavior: state.deleteBehavior,
      getBehaviorById: state.getBehaviorById,
      startEdit: state.startEdit,
      stopEdit: state.stopEdit,
      updateEditingBehavior: state.updateEditingBehavior,
      saveChanges: state.saveChanges,
      resetChanges: state.resetChanges,
      addParameter: state.addParameter,
      updateParameter: state.updateParameter,
      deleteParameter: state.deleteParameter,
      updateCodeConfig: state.updateCodeConfig,
      clearError: state.clearError,
      refreshBehaviors: state.refreshBehaviors,
    }))
  );
