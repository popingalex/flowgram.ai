import React, { useCallback, useMemo, ReactNode } from 'react';

import { nanoid } from 'nanoid';
import { Typography, Input, Form, Tag } from '@douyinfe/semi-ui';
import { Divider } from '@douyinfe/semi-ui';
import { IconSearch } from '@douyinfe/semi-icons';

import { createColumn } from '../ext/universal-table/column-configs';
import { UniversalTable } from '../ext/universal-table';
import { EntityPropertyTypeSelector } from '../ext/type-selector-ext';
import {
  useCurrentModule,
  useCurrentModuleActions,
  useEntityList,
  useModuleStore,
} from '../../stores';
import type { ModuleAttribute } from '../../services/types';
// const { Title } = Typography; // 未使用

interface ModuleDetailProps {
  selectedModule: any;
  isDirty: boolean; // 保留接口兼容性，但内部使用CurrentModuleStore的状态
  isSaving: boolean; // 保留接口兼容性，但内部使用CurrentModuleStore的状态
  canSave: boolean;
  onSave: () => void;
  onUndo: () => void;
  onDelete: () => void;
  actionButtons?: ReactNode;
  statusInfo?: ReactNode;
}

export const ModuleDetail: React.FC<ModuleDetailProps> = ({
  selectedModule,
  canSave,
  onSave,
  onUndo,
  onDelete,
  actionButtons,
  statusInfo,
}) => {
  // 🔑 使用CurrentModuleStore的数据和状态
  const { editingModule } = useCurrentModule();
  const { updateProperty, updateAttributeProperty, addAttribute, removeAttribute } =
    useCurrentModuleActions();

  // 🔑 获取实体列表和模块列表
  const { entities } = useEntityList();
  const { modules } = useModuleStore();

  // 🔑 搜索状态
  const [searchText, setSearchText] = React.useState('');
  const [moduleSearchText, setModuleSearchText] = React.useState('');

  // 🔑 使用CurrentModuleStore的editingModule作为数据源
  const currentModule = editingModule || selectedModule;

  // 🔧 调试：打印当前模块的完整数据
  console.log('🔧 当前模块完整数据:', {
    currentModule,
    modules: currentModule?.modules,
    modulesType: typeof currentModule?.modules,
    modulesLength: currentModule?.modules?.length,
    isArray: Array.isArray(currentModule?.modules),
  });

  // 🔑 计算关联的实体列表（通过bundles字段）
  const relatedEntities = useMemo(() => {
    if (!currentModule?.id || !entities) return [];

    return entities.filter((entity) => entity.bundles?.includes(currentModule.id));
  }, [currentModule?.id, entities]);

  // 🔑 获取选中的模块IDs（从modules字段）
  const selectedModuleIds = useMemo(() => {
    if (!currentModule?.modules) return [];

    // currentModule.modules 可能是字符串数组或对象数组
    return currentModule.modules.map((module: any) => {
      if (typeof module === 'string') {
        return module; // 如果是字符串，直接返回
      } else {
        return module.id; // 如果是对象，返回id字段
      }
    });
  }, [currentModule?.modules]);

  // 🔑 构建模块表格数据（排除当前正在编辑的模块），已选中的排在前面
  const moduleTableData = useMemo(() => {
    if (!modules) return [];

    const filteredModules = modules.filter((module) => module.id !== currentModule?.id);

    // 分离已选中和未选中的模块
    const selectedModules = filteredModules.filter((module) =>
      selectedModuleIds.includes(module.id)
    );
    const unselectedModules = filteredModules.filter(
      (module) => !selectedModuleIds.includes(module.id)
    );

    // 已选中的排在前面，然后是未选中的
    return [...selectedModules, ...unselectedModules].map((module) => ({
      ...module,
      key: module._indexId,
    }));
  }, [modules, currentModule?.id, selectedModuleIds]);

  // 🔑 构建模块树形数据（包含属性展开）
  const filteredModules = useMemo(() => {
    if (!moduleTableData) return [];

    // 构建包含属性的树形数据
    const treeData = moduleTableData.map((module) => {
      const moduleAttributes = module.attributes || [];
      const children = moduleAttributes.map((attr: any) => ({
        ...attr,
        _indexId: `${module._indexId}_attr_${attr._indexId || nanoid()}`,
        parentId: module.id,
        isAttribute: true,
      }));

      return {
        ...module,
        _indexId: module._indexId,
        attributeCount: moduleAttributes.length,
        children: children.length > 0 ? children : undefined,
      };
    });

    // 如果没有搜索文本，返回全部
    if (!moduleSearchText.trim()) return treeData;

    // 搜索过滤
    const searchLower = moduleSearchText.toLowerCase();
    return treeData.filter((module) => {
      // 模块本身匹配
      const moduleMatch =
        module.id?.toLowerCase().includes(searchLower) ||
        module.name?.toLowerCase().includes(searchLower);

      // 属性匹配
      const attributeMatch = module.children?.some((attr: any) =>
        attr.id?.toLowerCase().includes(searchLower) ||
        attr.name?.toLowerCase().includes(searchLower) ||
        attr.type?.toLowerCase().includes(searchLower)
      );

      return moduleMatch || attributeMatch;
    });
  }, [moduleTableData, moduleSearchText]);

  // 🔑 获取选中的模块keys（用于表格选中状态）
  const selectedModuleKeys = useMemo(() => {
    if (!selectedModuleIds || !moduleTableData) return [];

    const keys = selectedModuleIds
      .map((moduleId: string) => {
        // 从moduleTableData中查找，不要用filteredModules（可能被搜索过滤）
        const moduleInTable = moduleTableData.find((m) => m.id === moduleId);
        return moduleInTable?._indexId;
      })
      .filter(Boolean);

    console.log('🔧 选中状态调试:', {
      selectedModuleIds,
      selectedModuleKeys: keys,
      moduleTableDataCount: moduleTableData.length,
      moduleTableDataIds: moduleTableData.map(m => ({ id: m.id, _indexId: m._indexId })),
    });

    return keys;
  }, [selectedModuleIds, moduleTableData]);

  // 🔑 过滤后的属性列表
  const filteredAttributes = useMemo(() => {
    if (!currentModule?.attributes) {
      console.log('🔍 过滤调试: 没有属性数据');
      return [];
    }

    if (!searchText.trim()) {
      console.log('🔍 过滤调试: 无搜索文本，返回全部属性', currentModule.attributes.length);
      return currentModule.attributes;
    }

    const searchLower = searchText.toLowerCase();
    const filtered = currentModule.attributes.filter(
      (attr: any) =>
        attr.displayId?.toLowerCase().includes(searchLower) ||
        attr.name?.toLowerCase().includes(searchLower)
    );

    console.log('🔍 过滤调试:', {
      搜索文本: searchText,
      原始数量: currentModule.attributes.length,
      过滤后数量: filtered.length,
      原始数据: currentModule.attributes,
      过滤结果: filtered,
    });

    return filtered;
  }, [currentModule?.attributes, searchText]);

  // 🔑 字段更新 - 直接使用CurrentModuleStore的updateProperty
  const handleFieldChange = useCallback(
    (field: string, value: any) => {
      console.log('🔍 更新模块字段:', field, value);
      updateProperty(field, value);
    },
    [updateProperty]
  );

  // 🔑 属性字段更新
  const handleAttributeFieldChange = useCallback(
    (attributeIndexId: string, field: string, value: any) => {
      console.log('🔍 更新属性字段:', { attributeIndexId, field, value });
      updateAttributeProperty(attributeIndexId, field, value);
    },
    [updateAttributeProperty]
  );

  // 🔑 专门处理displayId的更新
  const handleDisplayIdChange = useCallback(
    (attributeIndexId: string, displayId: string) => {
      // 更新displayId
      updateAttributeProperty(attributeIndexId, 'displayId', displayId);

      // 同时更新完整的id（模块ID + / + displayId）
      if (currentModule?.id) {
        const fullId = displayId ? `${currentModule.id}/${displayId}` : displayId;
        updateAttributeProperty(attributeIndexId, 'id', fullId);
      }
    },
    [updateAttributeProperty, currentModule?.id]
  );

  // 🔑 添加属性
  const handleAddAttribute = useCallback(() => {
    const newAttribute: Omit<ModuleAttribute, '_indexId'> = {
      id: '', // 空ID，用户需要填写
      name: '', // 空名称，用户需要填写
      type: 'string',
      desc: '',
      displayId: '', // 无前缀ID
      _status: 'new',
    };
    addAttribute({ ...newAttribute, _indexId: nanoid() });
    console.log('🔍 添加新属性');
  }, [addAttribute]);

  // 🔑 删除属性
  const handleDeleteAttribute = useCallback(
    (attributeIndexId: string) => {
      removeAttribute(attributeIndexId);
      console.log('🔍 删除属性:', attributeIndexId);
    },
    [removeAttribute]
  );

  // 🔑 类型变更
  const handleTypeChange = useCallback(
    (attributeIndexId: string, typeInfo: any) => {
      console.log('🔍 类型变更:', { attributeIndexId, typeInfo });
      updateAttributeProperty(attributeIndexId, 'type', typeInfo.type);
      if (typeInfo.enumClassId) {
        updateAttributeProperty(attributeIndexId, 'enumClassId', typeInfo.enumClassId);
      } else {
        updateAttributeProperty(attributeIndexId, 'enumClassId', undefined);
      }
    },
    [updateAttributeProperty]
  );

  // 🔑 模块关联变更处理
  const handleModuleSelectionChange = useCallback(
    (selectedKeys: string[]) => {
      if (!modules) return;

      // 将选中的_indexId转换为完整的模块对象
      const selectedModuleObjects = selectedKeys
        .map((key) => {
          const module = modules.find((m) => m._indexId === key);
          if (module) {
            return {
              id: module.id,
              deprecated: module.deprecated || false,
              name: module.name,
              _indexId: module._indexId, // 保留_indexId用于前端关联
            };
          }
          return null;
        })
        .filter(Boolean);

      console.log('🔧 模块关联变更:', {
        selectedKeys,
        selectedModuleObjects,
        oldModules: currentModule?.modules || [],
      });

      // 更新模块的modules字段为完整的模块对象数组
      updateProperty('modules', selectedModuleObjects);
    },
    [modules, currentModule?.modules, updateProperty]
  );

  return (
    <div style={{ height: '100%', padding: '24px', overflow: 'auto' }}>
      {/* 基本信息 */}
      <div style={{ display: 'flex', flexDirection: 'column', gap: '16px', marginBottom: '24px' }}>
        <div style={{ display: 'flex', alignItems: 'center' }}>
          <Form.Label text="模块" required width={80} align="right" />
          <Input
            value={currentModule.id || ''}
            onChange={(value) => handleFieldChange('id', value)}
            placeholder="模块ID（必填）"
            validateStatus={!currentModule.id?.trim() ? 'error' : undefined}
            style={{
              flex: 1,
              marginLeft: '12px',
              fontFamily: 'SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace',
              fontSize: '12px',
            }}
            data-testid="module-id-input"
          />
        </div>

        <div style={{ display: 'flex', alignItems: 'center' }}>
          <Form.Label text="名称" width={80} align="right" />
          <Input
            value={currentModule.name || ''}
            onChange={(value) => handleFieldChange('name', value)}
            placeholder="模块名称"
            style={{ flex: 1, marginLeft: '12px' }}
            data-testid="module-name-input"
          />
        </div>

        <div style={{ display: 'flex', alignItems: 'center' }}>
          <Form.Label text="描述" width={80} align="right" />
          <Input
            value={currentModule.desc || ''}
            onChange={(value) => handleFieldChange('desc', value)}
            placeholder="模块描述"
            style={{ flex: 1, marginLeft: '12px' }}
            data-testid="module-description-input"
          />
        </div>
      </div>

      {/* 模块属性 */}
      <div style={{ display: 'flex', alignItems: 'flex-start' }}>
        <Form.Label text="模块属性" width={80} align="right" />
        <div style={{ flex: 1, marginLeft: '12px' }}>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
            {/* 搜索框 */}
            <Input
              prefix={<IconSearch />}
              placeholder="搜索属性ID或名称..."
              value={searchText}
              onChange={setSearchText}
              size="small"
              showClear
              style={{ width: '100%' }}
            />

            {/* 属性表格 */}
            <UniversalTable
              dataSource={filteredAttributes}
              searchText=""
              columns={[
                createColumn('id', 'ID', 'displayId', {
                  width: 180,
                  searchable: true,
                  editable: true,
                }),
                createColumn('type', '', 'type', {
                  width: 40,
                  searchable: true,
                  render: (value: any, record: any) => (
                    <EntityPropertyTypeSelector
                      value={{
                        type: record.type,
                        ...(record.enumClassId && { enumClassId: record.enumClassId }),
                      }}
                      onChange={(typeInfo: any) => {
                        handleTypeChange(record._indexId, typeInfo);
                      }}
                    />
                  ),
                }),
                createColumn('value', '默认值', 'value', {
                  width: 200,
                  searchable: true,
                  editable: true,
                }),
                createColumn('name', '名称', 'name', {
                  width: 150,
                  searchable: true,
                  editable: true,
                }),
              ]}
              rowKey="_indexId"
              editable={true}
              deletable={true}
              addable={true}
              size="small"
              emptyText="暂无属性"
              onEdit={(key, field, value) => {
                // 处理不同字段的编辑
                if (field === 'displayId') {
                  handleDisplayIdChange(key, value);
                } else {
                  handleAttributeFieldChange(key, field, value);
                }
              }}
              onDelete={(key) => {
                handleDeleteAttribute(key);
              }}
              onAdd={() => {
                handleAddAttribute();
              }}
            />
          </div>
        </div>
      </div>

      {/* 关联实体（只读显示） */}
      {relatedEntities.length > 0 && (
        <div style={{ display: 'flex', alignItems: 'flex-start' }}>
          <Form.Label text="被使用" width={80} align="right" />
          <div style={{ flex: 1, marginLeft: '12px' }}>
            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
              {relatedEntities.map((entity) => (
                <Typography.Text
                  key={entity._indexId}
                  link={{
                    href: `/entities/${entity.id}/`,
                  }}
                  style={{
                    fontSize: '12px',
                    padding: '2px 6px',
                    backgroundColor: 'var(--semi-color-fill-1)',
                    borderRadius: '4px',
                    border: '1px solid var(--semi-color-border)',
                  }}
                  data-testid={`related-entity-${entity.id}`}
                >
                  {entity.id} {entity.name && `(${entity.name})`}
                </Typography.Text>
              ))}
            </div>
            <Typography.Text
              type="secondary"
              size="small"
              style={{ display: 'block', marginTop: '4px' }}
            >
              共 {relatedEntities.length} 个实体使用此模块，点击可跳转
            </Typography.Text>
          </div>
        </div>
      )}
      <Divider />

      {/* 嵌套模块（可编辑） */}
      <div style={{ display: 'flex', alignItems: 'flex-start' }}>
        <Form.Label text="嵌套模块" width={80} align="right" />
        <div style={{ flex: 1, marginLeft: '12px' }}>
          <div style={{ marginBottom: '12px' }}>
            <Input
              prefix={<IconSearch />}
              placeholder="搜索模块ID、名称..."
              value={moduleSearchText}
              onChange={setModuleSearchText}
              showClear
              style={{ width: '100%' }}
            />
          </div>

          <div
            style={{
              height: '400px',
              overflow: 'auto',
              border: '1px solid var(--semi-color-border)',
              borderRadius: '6px',
            }}
          >
            <UniversalTable
              dataSource={filteredModules}
              searchText={moduleSearchText}
              columns={[
                createColumn('id', 'ID', 'id', {
                  width: 150,
                  searchable: true,
                  render: (value: any, record: any) => {
                    const displayValue = record.displayId || record.id;
                    const isGroupHeader = record.children && record.children.length > 0;

                    if (isGroupHeader) {
                      return (
                        <Typography.Text
                          link={{ href: `/modules/${record.id}` }}
                          style={{
                            fontFamily:
                              'SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace',
                            fontSize: '12px',
                            fontWeight: 600,
                            color: 'var(--semi-color-primary)',
                          }}
                          onClick={(e) => e.stopPropagation()}
                        >
                          {displayValue}
                        </Typography.Text>
                      );
                    } else {
                      return (
                        <Typography.Text
                          style={{
                            fontFamily:
                              'SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace',
                            fontSize: '12px',
                          }}
                        >
                          {displayValue}
                        </Typography.Text>
                      );
                    }
                  },
                }),
                createColumn('name', '名称', 'name', {
                  width: 200,
                  searchable: true,
                  render: (value: any, record: any) => {
                    const isGroupHeader = record.children && record.children.length > 0;

                    if (isGroupHeader) {
                      return (
                        <Typography.Text
                          link={{ href: `/modules/${record.id}` }}
                          style={{
                            fontSize: '13px',
                            fontWeight: 600,
                            color: 'var(--semi-color-primary)',
                          }}
                          onClick={(e) => e.stopPropagation()}
                        >
                          {record.name}
                        </Typography.Text>
                      );
                    } else {
                      return (
                        <Typography.Text style={{ fontSize: '13px' }}>{record.name}</Typography.Text>
                      );
                    }
                  },
                }),
                createColumn('typeOrCount', '', 'type', {
                  searchable: true,
                  render: (value: any, record: any) => {
                    const isGroupHeader = record.children && record.children.length > 0;

                    if (isGroupHeader) {
                      // 模块行：显示属性统计
                      return (
                        <Tag size="small" color="cyan">
                          {record.attributeCount || 0}
                        </Tag>
                      );
                    } else {
                      // 模块属性行：显示类型
                      return (
                        <EntityPropertyTypeSelector
                          value={{
                            type: record.type,
                            ...(record.enumClassId && { enumClassId: record.enumClassId }),
                          }}
                          onChange={() => {}} // 只读
                          disabled={true}
                        />
                      );
                    }
                  },
                }),
              ]}
              rowKey="_indexId"
              editable={false}
              showSelection={true}
              selectedKeys={selectedModuleKeys}
              onSelectionChange={handleModuleSelectionChange}
              getCheckboxProps={(record) => ({
                disabled: record.isAttribute, // 属性行禁用复选框
                style: record.isAttribute ? { display: 'none' } : {}, // 属性行隐藏复选框
              })}
              expandable={true}
              childrenColumnName="children"
              defaultExpandAllRows={false}
              expandRowByClick={true}
              size="small"
              emptyText="暂无模块"
              showPagination={false}
            />
          </div>
        </div>
      </div>
    </div>
  );
};
