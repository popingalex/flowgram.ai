import React, { useState, useMemo, useCallback } from 'react';

import { nanoid } from 'nanoid';
import {
  Table,
  Button,
  Space,
  Input,
  Popconfirm,
  Modal,
  Form,
  Typography,
  Tag,
  Tooltip,
} from '@douyinfe/semi-ui';
import {
  IconPlus,
  IconDelete,
  IconLink,
  IconUnlink,
  IconSave,
  IconRefresh,
  IconArrowRight,
  IconUndo,
  IconBranch,
} from '@douyinfe/semi-icons';

import { EntityPropertyTypeSelector, DataRestrictionButton } from './ext/type-selector-ext';
import { ModuleSelectorTableModal } from './bt/module-selector-table';
import { useModuleStore } from '../stores';
import { useEntityList, useEntityListActions } from '../stores';

const { Text } = Typography;

interface EntityListPageProps {
  onViewWorkflow?: (entityId: string) => void;
}

// 通用字段输入组件 - 替换所有重复的输入组件
const FieldInput = React.memo(
  ({
    value,
    onChange,
    placeholder,
    readonly = false,
    isIdField = false, // ID字段使用等宽字体
    required = false, // 是否必填
    isDuplicate = false, // 是否重复
  }: {
    value: string;
    onChange: (newValue: string) => void;
    placeholder: string;
    readonly?: boolean;
    isIdField?: boolean;
    required?: boolean;
    isDuplicate?: boolean;
  }) => {
    if (readonly) {
      const displayValue = isIdField && value ? value.split('/').pop() : value;
      return (
        <Text
          style={{
            fontFamily: isIdField
              ? 'SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace'
              : undefined,
            fontSize: isIdField ? '12px' : '13px',
          }}
        >
          {displayValue}
        </Text>
      );
    }

    // 检查是否为空（用于必填校验）
    const isEmpty = !value || value.trim() === '';
    const hasError = (required && isEmpty) || isDuplicate;

    return (
      <Input
        value={value}
        onChange={onChange}
        onClick={(e) => e.stopPropagation()}
        onFocus={(e) => e.stopPropagation()}
        size="small"
        placeholder={placeholder}
        validateStatus={hasError ? 'error' : 'default'}
        style={{
          fontFamily: isIdField
            ? 'SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace'
            : undefined,
          fontSize: isIdField ? '12px' : '13px',
        }}
      />
    );
  }
);
FieldInput.displayName = 'FieldInput';

export const EntityListPage: React.FC<EntityListPageProps> = ({ onViewWorkflow }) => {
  const { entities, loading } = useEntityList();
  const {
    addEntity,
    updateEntity,
    updateEntityField,
    updateEntityAttribute,
    addAttributeToEntity,
    removeAttributeFromEntity,
    deleteEntity,
    removeEntity,
    loadEntities,
    saveEntity,
  } = useEntityListActions();
  const { modules } = useModuleStore();

  const [searchText, setSearchText] = useState('');
  const [showModuleLinkModal, setShowModuleLinkModal] = useState(false);
  const [selectedEntity, setSelectedEntity] = useState<any>(null);

  // 🎯 简化：直接使用实体数据，无需工作副本

  // 转换为表格数据 - 简化版本，直接使用实体数据
  const tableData = useMemo(() => {
    console.log('🔄 重新计算表格数据，实体数量:', entities.length);
    const data: any[] = [];

    entities.forEach((entity) => {
      const entityRow: any = {
        key: entity._indexId,
        type: 'entity',
        entity: entity, // 🎯 直接使用实体数据
        children: [] as any[],
      };

      // 实体属性
      entity.attributes?.forEach((attr: any) => {
        entityRow.children.push({
          key: attr._indexId,
          type: 'attribute',
          entity: entity,
          attribute: attr,
          readonly: false,
        });
      });

      // 关联模块
      entity.bundles?.forEach((bundleId: string) => {
        const module = modules.find((m) => m._indexId === bundleId);
        if (module) {
          const moduleRow: any = {
            key: module._indexId,
            type: 'module',
            entity: entity,
            module: module,
            children: [] as any[],
          };

          // 模块属性
          module.attributes?.forEach((attr: any) => {
            moduleRow.children.push({
              key: attr._indexId,
              type: 'module-attribute',
              entity: entity,
              module: module,
              attribute: attr,
              readonly: true,
            });
          });

          entityRow.children.push(moduleRow);
        }
      });

      data.push(entityRow);
    });

    return data;
  }, [entities, modules]); // 🎯 简化依赖

  // 过滤数据
  const filteredData = useMemo(() => {
    if (!searchText) return tableData;

    return tableData.filter((item) => {
      // 直接使用存储的实体数据
      const entity = item.entity;
      if (!entity) return false;

      const entityMatch =
        (entity.id || '').toLowerCase().includes(searchText.toLowerCase()) ||
        (entity.name || '').toLowerCase().includes(searchText.toLowerCase());

      const childrenMatch = item.children?.some((child: any) => {
        if (child.type === 'attribute') {
          const attribute = child.attribute;
          return (
            attribute &&
            ((attribute.id || '').toLowerCase().includes(searchText.toLowerCase()) ||
              (attribute.name || '').toLowerCase().includes(searchText.toLowerCase()))
          );
        }
        if (child.type === 'module') {
          const module = child.module;
          return (
            module &&
            ((module.id || '').toLowerCase().includes(searchText.toLowerCase()) ||
              (module.name || '').toLowerCase().includes(searchText.toLowerCase()))
          );
        }
        return false;
      });

      return entityMatch || childrenMatch;
    });
  }, [tableData, searchText]); // 🎯 简化依赖，tableData已经包含了必要的依赖

  // 🎯 字段变更处理 - 直接更新实体，简化逻辑
  const handleEntityFieldChange = useCallback(
    (entityIndexId: string, field: string, value: any) => {
      console.log('🔍 更新实体字段:', entityIndexId, field, value);
      updateEntityField(entityIndexId, field, value);
    },
    [updateEntityField]
  );

  const handleAttributeFieldChange = useCallback(
    (entityIndexId: string, attributeId: string, field: string, value: any) => {
      console.log('🔍 更新属性字段:', entityIndexId, attributeId, field, value);
      updateEntityAttribute(entityIndexId, attributeId, field, value);
    },
    [updateEntityAttribute]
  );

  const handleTypeChange = (entityIndexId: string, attributeId: string, typeInfo: any) => {
    handleAttributeFieldChange(entityIndexId, attributeId, 'type', typeInfo.type);
  };

  // 🎯 检查实体是否有修改 - 直接检查实体状态
  const isEntityDirty = useCallback((entity: any) => {
    const status = entity._status;
    console.log('🔍 检查实体状态:', entity._indexId, '状态:', status);
    return status === 'dirty';
  }, []);

  // 检查实体是否可以保存（必填项都已填写且无重复）
  const canSaveEntity = (entity: any): boolean => {
    // 检查实体ID
    if (!entity.id || entity.id.trim() === '') {
      return false;
    }

    // 检查实体ID是否与其他实体重复
    const otherEntities = entities.filter((e) => e._indexId !== entity._indexId);
    if (otherEntities.some((e) => e.id === entity.id)) {
      return false;
    }

    // 检查所有属性的ID
    if (entity.attributes && entity.attributes.length > 0) {
      const attributeIds = new Set();
      for (const attr of entity.attributes) {
        // 检查属性ID是否为空
        if (!attr.id || attr.id.trim() === '') {
          return false;
        }
        // 检查属性ID是否重复
        if (attributeIds.has(attr.id)) {
          return false;
        }
        attributeIds.add(attr.id);
      }
    }

    return true;
  };

  // 检查字段是否重复
  const checkFieldDuplication = useCallback(
    (
      entityIndexId: string,
      field: 'id' | 'attribute-id',
      value: string,
      attributeIndexId?: string
    ): boolean => {
      if (!value || value.trim() === '') return false;

      if (field === 'id') {
        // 检查实体ID重复
        return entities.some((e) => e._indexId !== entityIndexId && e.id === value);
      } else if (field === 'attribute-id' && attributeIndexId) {
        // 检查属性ID重复（在同一实体内）
        const entity = entities.find((e) => e._indexId === entityIndexId);
        if (!entity) return false;

        return (
          entity.attributes?.some(
            (attr) => attr._indexId !== attributeIndexId && attr.id === value
          ) || false
        );
      }

      return false;
    },
    [entities]
  );

  // 获取保存错误提示
  const getSaveErrorMessage = (entity: any): string => {
    if (!entity.id || entity.id.trim() === '') {
      return '请填写实体ID';
    }

    // 检查实体ID是否与其他实体重复
    const otherEntities = entities.filter((e) => e._indexId !== entity._indexId);
    if (otherEntities.some((e) => e.id === entity.id)) {
      return `实体ID "${entity.id}" 已存在，请使用不同的ID`;
    }

    if (entity.attributes && entity.attributes.length > 0) {
      const attributeIds = new Set();
      for (const attr of entity.attributes) {
        if (!attr.id || attr.id.trim() === '') {
          return '请填写所有属性ID';
        }
        if (attributeIds.has(attr.id)) {
          return `属性ID "${attr.id}" 重复，请使用不同的ID`;
        }
        attributeIds.add(attr.id);
      }
    }

    return '保存实体修改';
  };

  // 表格列定义
  const columns = [
    // 第一列：展开按钮 40px
    {
      key: 'expand',
      width: 20,
      render: (_: any, record: any, index: number, { expandIcon }: any) => expandIcon,
    },
    // 第二列：链接按钮&行为树跳转按钮 60px
    {
      key: 'navigation',
      width: 60,
      render: (_: any, record: any) => {
        if (record.type === 'entity') {
          const entity = record.entity;
          return entity ? (
            <Space spacing={4}>
              <Tooltip content="编辑工作流">
                <Button
                  size="small"
                  onClick={(e) => {
                    e.stopPropagation();
                    // 在新窗口打开工作流编辑页面，使用hash格式确保兼容性
                    window.open(`/#entity-workflow/${entity.id}`, '_blank');
                  }}
                  icon={<IconBranch />}
                />
              </Tooltip>
              <Tooltip content="关联模块">
                <Button
                  size="small"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleLinkModule(entity);
                  }}
                  icon={<IconLink />}
                />
              </Tooltip>
            </Space>
          ) : null;
        }
        return null;
      },
    },
    // 第三列：标签 60px
    {
      key: 'type',
      width: 60,
      render: (_: any, record: any) => {
        if (record.type === 'entity') {
          const isNew = record.entity?._status === 'new';
          return (
            <Tag
              color="blue"
              style={
                isNew
                  ? {
                      boxShadow: '0 0 8px rgba(59, 130, 246, 0.6)',
                      animation: 'pulse 2s infinite',
                    }
                  : {}
              }
            >
              实体
            </Tag>
          );
        }
        if (record.type === 'attribute') {
          const isNew = record.attribute?._status === 'new';
          return (
            <Tag
              color="green"
              style={
                isNew
                  ? {
                      boxShadow: '0 0 8px rgba(34, 197, 94, 0.6)',
                      animation: 'pulse 2s infinite',
                    }
                  : {}
              }
            >
              属性
            </Tag>
          );
        }
        if (record.type === 'module') return <Tag color="orange">模块</Tag>;
        if (record.type === 'module-attribute') return <Tag color="grey">属性</Tag>;
        return <Tag>{record.type}</Tag>;
      },
    },
    // 第四列：ID 120px
    {
      title: 'ID',
      key: 'id',
      width: 160,
      render: (_: any, record: any) => {
        if (record.type === 'entity') {
          const displayEntity = getEntityWorkingCopy(record.entity);
          return (
            <FieldInput
              key={`entity-id-${record.entity._indexId}`}
              value={displayEntity.id}
              onChange={(newValue) =>
                handleEntityFieldChange(record.entity._indexId, 'id', newValue)
              }
              placeholder="实体ID（必填）"
              isIdField={true}
              required={true}
              isDuplicate={checkFieldDuplication(record.entity._indexId, 'id', displayEntity.id)}
            />
          );
        } else if (record.type === 'attribute') {
          return (
            <FieldInput
              key={`attr-id-${record.attribute._indexId}`}
              value={record.attribute.id}
              onChange={(newValue) =>
                handleAttributeFieldChange(
                  record.entity._indexId,
                  record.attribute._indexId,
                  'id',
                  newValue
                )
              }
              placeholder="属性ID（必填）"
              isIdField={true}
              required={true}
              isDuplicate={checkFieldDuplication(
                record.entity._indexId,
                'attribute-id',
                record.attribute.id,
                record.attribute._indexId
              )}
            />
          );
        } else if (record.type === 'module-attribute') {
          return (
            <FieldInput
              key={`mod-attr-id-${record.attribute._indexId}`}
              value={record.attribute.id}
              onChange={() => {}} // 只读，不处理变更
              placeholder="属性ID"
              isIdField={true}
              readonly={true}
            />
          );
        } else if (record.type === 'module') {
          return (
            <Text
              style={{
                fontFamily: 'SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace',
                fontSize: '12px',
              }}
            >
              {record.module?.id}
            </Text>
          );
        }
        return null;
      },
    },
    // 第五列：Name 160px
    {
      title: '名称',
      key: 'name',
      width: 200,
      render: (_: any, record: any) => {
        if (record.type === 'entity') {
          const displayEntity = getEntityWorkingCopy(record.entity);
          return (
            <FieldInput
              key={`entity-name-${record.entity._indexId}`}
              value={displayEntity.name}
              onChange={(newValue) =>
                handleEntityFieldChange(record.entity._indexId, 'name', newValue)
              }
              placeholder="实体名称"
            />
          );
        } else if (record.type === 'attribute') {
          return (
            <FieldInput
              key={`attr-name-${record.attribute._indexId}`}
              value={record.attribute.name}
              onChange={(newValue) =>
                handleAttributeFieldChange(
                  record.entity._indexId,
                  record.attribute._indexId,
                  'name',
                  newValue
                )
              }
              placeholder="属性名称"
              readonly={record.readonly}
            />
          );
        } else if (record.type === 'module-attribute') {
          return (
            <FieldInput
              key={`mod-attr-name-${record.attribute._indexId}`}
              value={record.attribute.name}
              onChange={() => {}} // 只读，不处理变更
              placeholder="属性名称"
              readonly={record.readonly}
            />
          );
        } else if (record.type === 'module') {
          return <Text style={{ fontSize: '13px' }}>{record.module?.name}</Text>;
        }
        return null;
      },
    },
    // 第六列：控件集合 80px
    {
      title: () => (
        <Button size="small" icon={<IconPlus />} type="primary" onClick={handleAddEntity}>
          添加实体
        </Button>
      ),
      key: 'actions',
      width: 100,
      render: (_: any, record: any) => (
        <div
          style={{
            display: 'flex',
            gap: '2px',
            justifyContent: 'flex-start',
            alignItems: 'center',
            // minWidth: '60px',
            // flexWrap: 'wrap',
          }}
          onClick={(e) => e.stopPropagation()}
        >
          {/* 类型选择器和数据限制按钮 - 只在属性行显示 */}
          {(record.type === 'attribute' || record.type === 'module-attribute') &&
            record.attribute &&
            (() => {
              if (record.type === 'attribute') {
                const displayAttribute = record.attribute;
                return (
                  <>
                    <Tooltip content="选择属性类型">
                      <EntityPropertyTypeSelector
                        value={{ type: displayAttribute.type, enum: displayAttribute.enum }}
                        onChange={(typeInfo) =>
                          handleTypeChange(
                            record.entity._indexId,
                            record.attribute._indexId,
                            typeInfo
                          )
                        }
                        disabled={record.readonly}
                      />
                    </Tooltip>
                    <DataRestrictionButton
                      value={{ type: displayAttribute.type, enum: displayAttribute.enum }}
                      onClick={() => {
                        // TODO: 打开数据限制编辑弹窗
                        console.log('编辑数据限制:', displayAttribute);
                      }}
                      disabled={record.readonly}
                    />
                  </>
                );
              } else {
                return (
                  <>
                    <Tooltip content="属性类型（只读）">
                      <EntityPropertyTypeSelector
                        value={{ type: record.attribute.type, enum: record.attribute.enum }}
                        onChange={(typeInfo) =>
                          handleTypeChange(
                            record.entity._indexId,
                            record.attribute._indexId,
                            typeInfo
                          )
                        }
                        disabled={record.readonly}
                      />
                    </Tooltip>
                    <DataRestrictionButton
                      value={{ type: record.attribute.type, enum: record.attribute.enum }}
                      onClick={() => {
                        // 模块属性不允许编辑数据限制
                        console.log('模块属性不允许编辑数据限制');
                      }}
                      disabled={true}
                    />
                  </>
                );
              }
            })()}

          {/* 实体操作按钮 */}
          {record.type === 'entity' &&
            record.entity &&
            (() => {
              const entity = getEntityWorkingCopy(record.entity); // 使用最新的编辑数据
              const entityIsDirty = isEntityDirty(record.entity._indexId);
              const canSave = canSaveEntity(entity);

              // 调试：保存按钮状态
              if (!entityIsDirty || !canSave) {
                console.log('🔍 保存按钮禁用原因:', {
                  entityId: record.entity._indexId,
                  isDirty: entityIsDirty,
                  canSave: canSave,
                  errorMessage: getSaveErrorMessage(entity),
                });
              }

              return (
                <>
                  <Tooltip content={getSaveErrorMessage(entity)}>
                    <Popconfirm
                      title="确定保存实体修改吗？"
                      content="保存后将更新到后台数据"
                      onConfirm={async (e) => {
                        e?.stopPropagation?.();
                        try {
                          const editingId = entityEditingIds[record.entity._indexId];
                          if (editingId) {
                            await saveWorkingCopy(editingId);
                            console.log('✅ 实体保存成功');
                          }
                        } catch (error) {
                          console.error('❌ 实体保存失败:', error);
                        }
                      }}
                    >
                      <Button
                        size="small"
                        type="primary"
                        onClick={(e) => e.stopPropagation()}
                        icon={<IconSave />}
                        disabled={!entityIsDirty || !canSave}
                        loading={entity._editing?.isSaving === true}
                      />
                    </Popconfirm>
                  </Tooltip>
                  {entity._status !== 'new' ? (
                    <Tooltip content="撤销修改">
                      <Button
                        size="small"
                        onClick={(e) => {
                          e.stopPropagation();
                          const editingId = entityEditingIds[record.entity._indexId];
                          if (editingId) {
                            resetWorkingCopy(editingId);
                          }
                        }}
                        icon={<IconUndo />}
                        disabled={!entityIsDirty}
                      />
                    </Tooltip>
                  ) : (
                    <Button size="small" disabled style={{ opacity: 0.3 }} />
                  )}
                  <Tooltip content="添加属性">
                    <Button
                      size="small"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleAddAttribute(record.entity._indexId);
                      }}
                      icon={<IconPlus />}
                    />
                  </Tooltip>
                  <Tooltip content="删除实体">
                    <Popconfirm
                      title={
                        entity._status === 'new'
                          ? '确定删除这个新增实体吗？'
                          : '确定删除这个实体吗？删除后将从后台数据中移除。'
                      }
                      onConfirm={async (e) => {
                        e?.stopPropagation?.();
                        await handleDeleteEntity(entity);
                      }}
                    >
                      <Button
                        size="small"
                        type="danger"
                        icon={<IconDelete />}
                        onClick={(e) => e.stopPropagation()}
                      />
                    </Popconfirm>
                  </Tooltip>
                </>
              );
            })()}

          {/* 属性删除按钮 */}
          {record.type === 'attribute' && record.entity && record.attribute && (
            <Tooltip content="删除属性">
              <Popconfirm
                title="确定删除这个属性吗？"
                onConfirm={(e) => {
                  e?.stopPropagation?.();
                  handleDeleteAttribute(record.entity, record.attribute);
                }}
              >
                <Button
                  size="small"
                  type="danger"
                  icon={<IconDelete />}
                  onClick={(e) => e.stopPropagation()}
                />
              </Popconfirm>
            </Tooltip>
          )}

          {/* 模块解绑按钮 */}
          {record.type === 'module' && record.entity && record.module && (
            <Tooltip content="解绑模块">
              <Popconfirm
                title="确定移除这个模块吗？"
                onConfirm={(e) => {
                  e?.stopPropagation?.();
                  handleUnlinkModule(record.entity, record.module);
                }}
              >
                <Button
                  size="small"
                  type="danger"
                  icon={<IconDelete />}
                  onClick={(e) => e.stopPropagation()}
                />
              </Popconfirm>
            </Tooltip>
          )}
        </div>
      ),
    },
  ];

  // 事件处理
  const handleViewWorkflow = (entity: any) => {
    if (onViewWorkflow) {
      onViewWorkflow(entity.id);
    }
  };

  const handleSaveEntityChanges = (entity: any) => {
    // 实际上数据已经实时保存到store了，这里可以显示保存成功提示
    console.log('保存实体:', entity);
    // TODO: 可以调用后台API保存
  };

  const handleResetEntityChanges = (entity: any) => {
    // 重新加载实体数据，撤销本地修改
    console.log('撤销实体修改:', entity);
    // TODO: 重新从后台加载数据
  };

  const handleDeleteEntity = async (entity: any) => {
    try {
      console.log('🗑️ 开始删除实体:', entity.id);

      // 如果是新增状态的实体，只需要从本地状态删除
      if (entity._status === 'new') {
        console.log('🗑️ 删除新增实体（仅本地）:', entity.id);
        deleteEntity(entity._indexId);
        return;
      }

      // 已保存的实体需要调用后台API删除
      console.log('🗑️ 删除已保存实体（调用API）:', entity.id);
      await removeEntity(entity.id); // 使用业务ID调用API
      console.log('✅ 实体删除成功:', entity.id);
    } catch (error) {
      console.error('❌ 实体删除失败:', error);
    }
  };

  const handleDeleteAttribute = (entity: any, attribute: any) => {
    const editingId = entityEditingIds[entity._indexId];
    if (editingId) {
      removeAttributeFromWorkingCopy(editingId, attribute._indexId);
    }
  };

  const handleUnlinkModule = (entity: any, module: any) => {
    const updatedEntity = { ...entity };
    updatedEntity.bundles = updatedEntity.bundles?.filter(
      (bundleId: string) => bundleId !== module._indexId
    );
    updateEntity(entity._indexId, updatedEntity);
  };

  const handleLinkModule = (entity: any) => {
    setSelectedEntity(entity);
    setShowModuleLinkModal(true);
  };

  const handleAddEntity = () => {
    const newEntity = {
      _indexId: nanoid(), // 使用nanoid作为稳定的React key
      id: '', // 业务ID由用户填写（必填）
      name: '', // 名称可以为空
      attributes: [],
      bundles: [],
      deprecated: false,
      _status: 'new' as const, // 标记为新增状态
    };

    addEntity(newEntity);
    // 🎯 自动开始编辑新添加的实体
    const editingId = startEditing(newEntity._indexId);
    setEntityEditingIds((prev) => ({
      ...prev,
      [newEntity._indexId]: editingId,
    }));
    console.log('✅ 添加新实体并开始编辑:', newEntity._indexId, '编辑ID:', editingId);
  };

  const handleAddAttribute = (entityIndexId: string) => {
    const editingId = entityEditingIds[entityIndexId];
    if (editingId) {
      addAttributeToWorkingCopy(editingId);
      console.log('✅ 为实体添加属性:', entityIndexId);
    }
  };

  const handleSaveModuleLink = (selectedModuleIds: string[]) => {
    if (selectedEntity) {
      const updatedEntity = { ...selectedEntity };
      updatedEntity.bundles = selectedModuleIds;
      updateEntity(selectedEntity._indexId, updatedEntity);
    }
    setShowModuleLinkModal(false);
    setSelectedEntity(null);
  };

  return (
    <div style={{ padding: '24px' }}>
      <div style={{ marginBottom: '16px', display: 'flex', gap: '12px' }}>
        <Input
          placeholder="搜索实体、属性..."
          value={searchText}
          onChange={setSearchText}
          style={{ width: 300 }}
        />
        <Button
          icon={<IconRefresh />}
          onClick={async () => {
            console.log('🔄 刷新数据');
            await loadEntities();
            console.log('🔄 数据已刷新');
          }}
          loading={loading}
        >
          刷新
        </Button>
      </div>

      <Table
        columns={columns}
        dataSource={filteredData}
        loading={loading}
        pagination={false}
        childrenRecordName="children"
        expandIcon={false}
        expandRowByClick={true}
        hideExpandedColumn={true}
        indentSize={0}
        size="small"
        style={{ tableLayout: 'fixed' }}
        className="entity-list-table"
        scroll={{ y: 'calc(100vh - 200px)' }}
        rowKey="key"
        onRow={useCallback((record: any, index?: number) => {
          // 为新增状态的行添加className，避免每次渲染创建新对象
          if (record.type === 'entity' && record.entity?._status === 'new') {
            return { className: 'entity-row-new' };
          }
          if (
            (record.type === 'attribute' || record.type === 'module-attribute') &&
            record.attribute?._status === 'new'
          ) {
            return { className: 'attribute-row-new' };
          }
          return {};
        }, [])}
      />

      <style>
        {`
          .entity-list-table .semi-table-tbody > .semi-table-row > .semi-table-row-cell {
            padding-right: 12px;
            padding-left: 12px;
          }

          /* 新增实体行的左边框 */
          .entity-list-table .entity-row-new {
            border-left: 4px solid var(--semi-color-primary) !important;
          }

          /* 新增属性行的左边框 */
          .entity-list-table .attribute-row-new {
            border-left: 4px solid var(--semi-color-primary) !important;
          }

          /* 新增元素的泛光动画 */
          @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
          }
        `}
      </style>

      {/* 模块关联弹窗 */}
      {showModuleLinkModal && selectedEntity && (
        <ModuleSelectorTableModal
          visible={showModuleLinkModal}
          selectedModuleIds={selectedEntity.bundles || []}
          onCancel={() => {
            setShowModuleLinkModal(false);
            setSelectedEntity(null);
          }}
          onConfirm={handleSaveModuleLink}
          entityId={selectedEntity._indexId}
        />
      )}
    </div>
  );
};
