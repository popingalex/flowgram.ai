import React, { useEffect } from 'react';

import { FormMeta, ValidateTrigger, Field, FormRenderProps } from '@flowgram.ai/free-layout-editor';
import { Input, TextArea, Typography, InputNumber } from '@douyinfe/semi-ui';

import { FlowNodeJSON } from '../../typings';
import { useCurrentBehavior, useCurrentBehaviorActions } from '../../stores/current-workflow';
import { FormHeader, FormContent, FormItem, FormOutputs } from '../../form-components';

const renderForm = ({ form }: FormRenderProps<FlowNodeJSON>) => {
  // üîë Ëé∑ÂèñÂΩìÂâçË°å‰∏∫‰ø°ÊÅØÔºåstartËäÇÁÇπ‰ªéWorkflowGraphËØªÂèñÂ±ûÊÄß
  const { editingBehavior } = useCurrentBehavior();
  const { updateBehavior } = useCurrentBehaviorActions();

  // ÁîüÊàêÂü∫Á°ÄÁöÑËæìÂá∫ÈÖçÁΩÆÔºå‰∏ç‰æùËµñÂ§ñÈÉ®Áä∂ÊÄÅ
  const generateBasicOutputs = () => {
    const properties: Record<string, any> = {};

    // Ê∑ªÂä†Âü∫Á°ÄÁöÑ‰∏ä‰∏ãÊñáÂ±ûÊÄß
    properties['$context'] = {
      type: 'object',
      title: '‰∏ä‰∏ãÊñá',
      description: 'Â∑•‰ΩúÊµÅÊâßË°å‰∏ä‰∏ãÊñá',
      properties: {
        entityId: {
          type: 'string',
          title: 'ÂÆû‰ΩìID',
          description: 'ÂΩìÂâçÂÆû‰ΩìÁöÑID',
        },
        timestamp: {
          type: 'string',
          title: 'Êó∂Èó¥Êà≥',
          description: 'Â∑•‰ΩúÊµÅÊâßË°åÊó∂Èó¥',
        },
        executionId: {
          type: 'string',
          title: 'ÊâßË°åID',
          description: 'ÂΩìÂâçÊâßË°åÁöÑÂîØ‰∏ÄÊ†áËØÜ',
        },
      },
    };

    // Ê∑ªÂä†‰∏Ä‰∫õÂ∏∏Áî®ÁöÑËæìÂá∫Â±ûÊÄßÁ§∫‰æã
    properties['result'] = {
      type: 'string',
      title: 'ÁªìÊûú',
      description: 'ËäÇÁÇπÊâßË°åÁªìÊûú',
    };

    properties['status'] = {
      type: 'string',
      title: 'Áä∂ÊÄÅ',
      description: 'ÊâßË°åÁä∂ÊÄÅ',
      enum: ['success', 'error', 'pending'],
    };

    return {
      type: 'object',
      properties,
    };
  };

  const outputs = generateBasicOutputs();

  // Ëá™Âä®Êõ¥Êñ∞Ë°®ÂçïÁöÑoutputsÂ≠óÊÆµ
  useEffect(() => {
    if (form.setValueIn && outputs) {
      form.setValueIn('outputs', outputs);
    }
  }, [outputs, form.setValueIn]);

  // üîë Â§ÑÁêÜË°å‰∏∫Â±ûÊÄßÂèòÂåñÔºåÁõ¥Êé•Êõ¥Êñ∞WorkflowGraph
  const handleBehaviorChange = (field: string, value: any) => {
    if (updateBehavior) {
      updateBehavior({ [field]: value });
    }
  };

  return (
    <>
      <FormHeader />
      <FormContent>
        <FormItem name="ID" type="string" required>
          <Input
            value={editingBehavior?.id || ''}
            onChange={(value) => handleBehaviorChange('id', value)}
            placeholder="Á≥ªÁªüÂîØ‰∏ÄÊ†áËØÜÁ¨¶"
            style={{ width: '100%' }}
          />
        </FormItem>

        <FormItem name="ÂêçÁß∞" type="string">
          <Input
            value={editingBehavior?.name || ''}
            onChange={(value) => handleBehaviorChange('name', value)}
            placeholder="Ë°å‰∏∫ÂêçÁß∞"
            style={{ width: '100%' }}
          />
        </FormItem>

        <FormItem name="ÊèèËø∞" type="string">
          <TextArea
            value={editingBehavior?.desc || ''}
            onChange={(value) => handleBehaviorChange('desc', value)}
            placeholder="Ë°å‰∏∫ÊèèËø∞"
            style={{ width: '100%' }}
            rows={3}
          />
        </FormItem>
      </FormContent>
    </>
  );
};

export const formMeta: FormMeta<FlowNodeJSON> = {
  render: renderForm,
  validateTrigger: ValidateTrigger.onChange,
  validate: {
    title: ({ value }: { value: string }) => (value ? undefined : 'Ê†áÈ¢ò‰∏çËÉΩ‰∏∫Á©∫'),
    id: ({ value }: { value: string }) => (value ? undefined : 'ID‰∏çËÉΩ‰∏∫Á©∫'),
  },
};
